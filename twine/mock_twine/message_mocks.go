// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/twine-go/twine (interfaces: SentMessageI,ReceivedMessageI,ReceivedReplyI)

// Package mock_twine is a generated GoMock package.
package mock_twine

import (
	gomock "github.com/golang/mock/gomock"
	twine "github.com/teleclimber/twine-go/twine"
	reflect "reflect"
)

// MockSentMessageI is a mock of SentMessageI interface
type MockSentMessageI struct {
	ctrl     *gomock.Controller
	recorder *MockSentMessageIMockRecorder
}

// MockSentMessageIMockRecorder is the mock recorder for MockSentMessageI
type MockSentMessageIMockRecorder struct {
	mock *MockSentMessageI
}

// NewMockSentMessageI creates a new mock instance
func NewMockSentMessageI(ctrl *gomock.Controller) *MockSentMessageI {
	mock := &MockSentMessageI{ctrl: ctrl}
	mock.recorder = &MockSentMessageIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSentMessageI) EXPECT() *MockSentMessageIMockRecorder {
	return m.recorder
}

// CommandID mocks base method
func (m *MockSentMessageI) CommandID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandID")
	ret0, _ := ret[0].(int)
	return ret0
}

// CommandID indicates an expected call of CommandID
func (mr *MockSentMessageIMockRecorder) CommandID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandID", reflect.TypeOf((*MockSentMessageI)(nil).CommandID))
}

// GetRefRequestsChan mocks base method
func (m *MockSentMessageI) GetRefRequestsChan() chan twine.ReceivedMessageI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefRequestsChan")
	ret0, _ := ret[0].(chan twine.ReceivedMessageI)
	return ret0
}

// GetRefRequestsChan indicates an expected call of GetRefRequestsChan
func (mr *MockSentMessageIMockRecorder) GetRefRequestsChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefRequestsChan", reflect.TypeOf((*MockSentMessageI)(nil).GetRefRequestsChan))
}

// MsgID mocks base method
func (m *MockSentMessageI) MsgID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgID")
	ret0, _ := ret[0].(int)
	return ret0
}

// MsgID indicates an expected call of MsgID
func (mr *MockSentMessageIMockRecorder) MsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgID", reflect.TypeOf((*MockSentMessageI)(nil).MsgID))
}

// Payload mocks base method
func (m *MockSentMessageI) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockSentMessageIMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockSentMessageI)(nil).Payload))
}

// RefMsgID mocks base method
func (m *MockSentMessageI) RefMsgID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefMsgID")
	ret0, _ := ret[0].(int)
	return ret0
}

// RefMsgID indicates an expected call of RefMsgID
func (mr *MockSentMessageIMockRecorder) RefMsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefMsgID", reflect.TypeOf((*MockSentMessageI)(nil).RefMsgID))
}

// RefSend mocks base method
func (m *MockSentMessageI) RefSend(arg0 int, arg1 []byte) (twine.SentMessageI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefSend", arg0, arg1)
	ret0, _ := ret[0].(twine.SentMessageI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefSend indicates an expected call of RefSend
func (mr *MockSentMessageIMockRecorder) RefSend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefSend", reflect.TypeOf((*MockSentMessageI)(nil).RefSend), arg0, arg1)
}

// RefSendBlock mocks base method
func (m *MockSentMessageI) RefSendBlock(arg0 int, arg1 []byte) (twine.ReceivedReplyI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefSendBlock", arg0, arg1)
	ret0, _ := ret[0].(twine.ReceivedReplyI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefSendBlock indicates an expected call of RefSendBlock
func (mr *MockSentMessageIMockRecorder) RefSendBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefSendBlock", reflect.TypeOf((*MockSentMessageI)(nil).RefSendBlock), arg0, arg1)
}

// ServiceID mocks base method
func (m *MockSentMessageI) ServiceID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ServiceID indicates an expected call of ServiceID
func (mr *MockSentMessageIMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockSentMessageI)(nil).ServiceID))
}

// WaitReply mocks base method
func (m *MockSentMessageI) WaitReply() (twine.ReceivedReplyI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitReply")
	ret0, _ := ret[0].(twine.ReceivedReplyI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitReply indicates an expected call of WaitReply
func (mr *MockSentMessageIMockRecorder) WaitReply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitReply", reflect.TypeOf((*MockSentMessageI)(nil).WaitReply))
}

// MockReceivedMessageI is a mock of ReceivedMessageI interface
type MockReceivedMessageI struct {
	ctrl     *gomock.Controller
	recorder *MockReceivedMessageIMockRecorder
}

// MockReceivedMessageIMockRecorder is the mock recorder for MockReceivedMessageI
type MockReceivedMessageIMockRecorder struct {
	mock *MockReceivedMessageI
}

// NewMockReceivedMessageI creates a new mock instance
func NewMockReceivedMessageI(ctrl *gomock.Controller) *MockReceivedMessageI {
	mock := &MockReceivedMessageI{ctrl: ctrl}
	mock.recorder = &MockReceivedMessageIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceivedMessageI) EXPECT() *MockReceivedMessageIMockRecorder {
	return m.recorder
}

// CommandID mocks base method
func (m *MockReceivedMessageI) CommandID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandID")
	ret0, _ := ret[0].(int)
	return ret0
}

// CommandID indicates an expected call of CommandID
func (mr *MockReceivedMessageIMockRecorder) CommandID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandID", reflect.TypeOf((*MockReceivedMessageI)(nil).CommandID))
}

// GetRefRequestsChan mocks base method
func (m *MockReceivedMessageI) GetRefRequestsChan() chan twine.ReceivedMessageI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefRequestsChan")
	ret0, _ := ret[0].(chan twine.ReceivedMessageI)
	return ret0
}

// GetRefRequestsChan indicates an expected call of GetRefRequestsChan
func (mr *MockReceivedMessageIMockRecorder) GetRefRequestsChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefRequestsChan", reflect.TypeOf((*MockReceivedMessageI)(nil).GetRefRequestsChan))
}

// MsgID mocks base method
func (m *MockReceivedMessageI) MsgID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgID")
	ret0, _ := ret[0].(int)
	return ret0
}

// MsgID indicates an expected call of MsgID
func (mr *MockReceivedMessageIMockRecorder) MsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgID", reflect.TypeOf((*MockReceivedMessageI)(nil).MsgID))
}

// Payload mocks base method
func (m *MockReceivedMessageI) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockReceivedMessageIMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockReceivedMessageI)(nil).Payload))
}

// RefMsgID mocks base method
func (m *MockReceivedMessageI) RefMsgID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefMsgID")
	ret0, _ := ret[0].(int)
	return ret0
}

// RefMsgID indicates an expected call of RefMsgID
func (mr *MockReceivedMessageIMockRecorder) RefMsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefMsgID", reflect.TypeOf((*MockReceivedMessageI)(nil).RefMsgID))
}

// RefSend mocks base method
func (m *MockReceivedMessageI) RefSend(arg0 int, arg1 []byte) (twine.SentMessageI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefSend", arg0, arg1)
	ret0, _ := ret[0].(twine.SentMessageI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefSend indicates an expected call of RefSend
func (mr *MockReceivedMessageIMockRecorder) RefSend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefSend", reflect.TypeOf((*MockReceivedMessageI)(nil).RefSend), arg0, arg1)
}

// RefSendBlock mocks base method
func (m *MockReceivedMessageI) RefSendBlock(arg0 int, arg1 []byte) (twine.ReceivedReplyI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefSendBlock", arg0, arg1)
	ret0, _ := ret[0].(twine.ReceivedReplyI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefSendBlock indicates an expected call of RefSendBlock
func (mr *MockReceivedMessageIMockRecorder) RefSendBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefSendBlock", reflect.TypeOf((*MockReceivedMessageI)(nil).RefSendBlock), arg0, arg1)
}

// Reply mocks base method
func (m *MockReceivedMessageI) Reply(arg0 int, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply
func (mr *MockReceivedMessageIMockRecorder) Reply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockReceivedMessageI)(nil).Reply), arg0, arg1)
}

// SendError mocks base method
func (m *MockReceivedMessageI) SendError(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendError indicates an expected call of SendError
func (mr *MockReceivedMessageIMockRecorder) SendError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendError", reflect.TypeOf((*MockReceivedMessageI)(nil).SendError), arg0)
}

// SendOK mocks base method
func (m *MockReceivedMessageI) SendOK() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOK")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOK indicates an expected call of SendOK
func (mr *MockReceivedMessageIMockRecorder) SendOK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOK", reflect.TypeOf((*MockReceivedMessageI)(nil).SendOK))
}

// ServiceID mocks base method
func (m *MockReceivedMessageI) ServiceID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ServiceID indicates an expected call of ServiceID
func (mr *MockReceivedMessageIMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockReceivedMessageI)(nil).ServiceID))
}

// MockReceivedReplyI is a mock of ReceivedReplyI interface
type MockReceivedReplyI struct {
	ctrl     *gomock.Controller
	recorder *MockReceivedReplyIMockRecorder
}

// MockReceivedReplyIMockRecorder is the mock recorder for MockReceivedReplyI
type MockReceivedReplyIMockRecorder struct {
	mock *MockReceivedReplyI
}

// NewMockReceivedReplyI creates a new mock instance
func NewMockReceivedReplyI(ctrl *gomock.Controller) *MockReceivedReplyI {
	mock := &MockReceivedReplyI{ctrl: ctrl}
	mock.recorder = &MockReceivedReplyIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReceivedReplyI) EXPECT() *MockReceivedReplyIMockRecorder {
	return m.recorder
}

// CommandID mocks base method
func (m *MockReceivedReplyI) CommandID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommandID")
	ret0, _ := ret[0].(int)
	return ret0
}

// CommandID indicates an expected call of CommandID
func (mr *MockReceivedReplyIMockRecorder) CommandID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommandID", reflect.TypeOf((*MockReceivedReplyI)(nil).CommandID))
}

// Error mocks base method
func (m *MockReceivedReplyI) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockReceivedReplyIMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockReceivedReplyI)(nil).Error))
}

// MsgID mocks base method
func (m *MockReceivedReplyI) MsgID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MsgID")
	ret0, _ := ret[0].(int)
	return ret0
}

// MsgID indicates an expected call of MsgID
func (mr *MockReceivedReplyIMockRecorder) MsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgID", reflect.TypeOf((*MockReceivedReplyI)(nil).MsgID))
}

// OK mocks base method
func (m *MockReceivedReplyI) OK() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OK")
	ret0, _ := ret[0].(bool)
	return ret0
}

// OK indicates an expected call of OK
func (mr *MockReceivedReplyIMockRecorder) OK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OK", reflect.TypeOf((*MockReceivedReplyI)(nil).OK))
}

// Payload mocks base method
func (m *MockReceivedReplyI) Payload() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Payload indicates an expected call of Payload
func (mr *MockReceivedReplyIMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockReceivedReplyI)(nil).Payload))
}

// RefMsgID mocks base method
func (m *MockReceivedReplyI) RefMsgID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefMsgID")
	ret0, _ := ret[0].(int)
	return ret0
}

// RefMsgID indicates an expected call of RefMsgID
func (mr *MockReceivedReplyIMockRecorder) RefMsgID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefMsgID", reflect.TypeOf((*MockReceivedReplyI)(nil).RefMsgID))
}

// SendError mocks base method
func (m *MockReceivedReplyI) SendError(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendError indicates an expected call of SendError
func (mr *MockReceivedReplyIMockRecorder) SendError(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendError", reflect.TypeOf((*MockReceivedReplyI)(nil).SendError), arg0)
}

// SendOK mocks base method
func (m *MockReceivedReplyI) SendOK() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOK")
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOK indicates an expected call of SendOK
func (mr *MockReceivedReplyIMockRecorder) SendOK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOK", reflect.TypeOf((*MockReceivedReplyI)(nil).SendOK))
}

// ServiceID mocks base method
func (m *MockReceivedReplyI) ServiceID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ServiceID indicates an expected call of ServiceID
func (mr *MockReceivedReplyIMockRecorder) ServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceID", reflect.TypeOf((*MockReceivedReplyI)(nil).ServiceID))
}
